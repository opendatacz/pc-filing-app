<?php
    $templateData = loadData();
    $ow = OntoWiki::getInstance();
    $user = $ow->getUser();
    $store = $ow->erfurt->getStore();
        
    $basePath = $GLOBALS["cBasePath"];
    require_once("$basePath/lib/edit.lib.php");

    $username = $user->getUsername();
    $psuri = getPrivateSpace($ow);
    if ($psuri === false) throw new OntoWiki_Exception("User has no private space.");
    $modeluri = $psuri[0];
    $model = $store->getModel($modeluri);
    if (!isset($_REQUEST["uri"])) throw new OntoWiki_Exception("No resource selected.");//TODO: check type
    $xsdp = $model->getNamespacePrefix('http://www.w3.org/2001/XMLSchema#');
    $conuri = $_REQUEST["uri"];
    $post = $_POST;
    
    if ($post) //melo by byt
    {
        $resm = new OntoWiki_Model_Resource($store,$model,$conuri);
        $vals = $resm->getValues();
        if (isset($vals[$model->getModelIri()]))
            $vals = $vals[$model->getModelIri()];
        else throw new OntoWiki_Exception("Unknown error.");
        //title
        literalEdit($store,$model,$conuri,$GLOBALS["ns_var"]["dct"]."title",
            $post["dct:title0"],$vals[$GLOBALS["ns_var"]["dct"]."title"][0]["content"]);
        /*$newval = $post["dct:title0"];
        $lastval = $vals[$GLOBALS["ns_var"]["dct"]."title"][0]["content"];
        if ($newval != $lastval) {
            $store->addStatement($model->getModelUri(),
                $conuri,
                $GLOBALS["ns_var"]["dct"]."title",
                array('value' => $newval, 'type'  => 'literal' ));
            $store->deleteMatchingStatements($model->getModelUri(),
                $conuri,
                $GLOBALS["ns_var"]["dct"]."title",
                array('value' => $lastval, 'type'  => 'literal'));
        }*/
        //description
        literalEdit($store,$model,$conuri,$GLOBALS["ns_var"]["dct"]."description",
            $post["dct:description0"],$vals[$GLOBALS["ns_var"]["dct"]."description"][0]["content"]);
        /*$newval = $post["dct:description0"];
        $lastval = $vals[$GLOBALS["ns_var"]["dct"]."description"][0]["content"];
        if ($newval != $lastval) {
            $store->addStatement($model->getModelUri(),
                $conuri,
                $GLOBALS["ns_var"]["dct"]."description",
                array('value' => $newval, 'type'  => 'literal' ));
            $store->deleteMatchingStatements($model->getModelUri(),
                $conuri,
                $GLOBALS["ns_var"]["dct"]."description",
                array('value' => $lastval, 'type'  => 'literal'));
        }*/
        //tenderDeadline
        if (!isset($vals[$GLOBALS["ns_var"]["pc"]."tenderDeadline"][0]))
            $olddate = false;
        else
            $olddate = $vals[$GLOBALS["ns_var"]["pc"]."tenderDeadline"][0]["content"];
        dateEdit($store,$model,$conuri,$GLOBALS["ns_var"]["pc"]."tenderDeadline",
            $post["pc:tenderDeadline0_3"],$post["pc:tenderDeadline0_1"],$post["pc:tenderDeadline0_2"],
            $olddate);
        
        $queryao = 'SELECT ?a ?o WHERE {
            <'.$conuri.'> <'.$GLOBALS["ns_var"]["pc"].'contact> ?c .
            ?c <http://www.w3.org/2006/vcard/ns#adr> ?a . 
            ?c <http://www.w3.org/2006/vcard/ns#org> ?o .}';
        $aores = $model->sparqlQuery($queryao);
        $orguri = $aores[0]["o"];
        $adruri = $aores[0]["a"];
        $resm = new OntoWiki_Model_Resource($store,$model,$orguri);
        $vals = $resm->getValues();
        if (isset($vals[$model->getModelIri()])) {
            $vals = $vals[$model->getModelIri()];
            //organization name
            literalEdit($store,$model,$orguri,$GLOBALS["ns_var"]["vcard"]."organization-name",
                $post["vcard:organization-name0"],$vals[$GLOBALS["ns_var"]["vcard"]."organization-name"][0]["content"]);
            /*$newval = $post["vcard:organization-name0"];
            $lastval = $vals[$GLOBALS["ns_var"]["vcard"]."organization-name"][0]["content"];
            if ($newval != $lastval) {
                $store->addStatement($model->getModelUri(),
                    $orguri,
                    $GLOBALS["ns_var"]["vcard"]."organization-name",
                    array('value' => $newval, 'type'  => 'literal' ));
                $store->deleteMatchingStatements($model->getModelUri(),
                    $orguri,
                    $GLOBALS["ns_var"]["vcard"]."organization-name",
                    array('value' => $lastval, 'type'  => 'literal'));
            }*/
        }
        
        /*$strt = $post["vcard:street0"];
        $city = $post["vcard:locality0"];
        $post = $post["vcard:postal-code0"];
        $country = $post["vcard:country-name0"];*/
        $resm = new OntoWiki_Model_Resource($store,$model,$adruri);
        $vals = $resm->getValues();
        if (isset($vals[$model->getModelIri()])) {
            $vals = $vals[$model->getModelIri()];
            //street
            literalEdit($store,$model,$adruri,$GLOBALS["ns_var"]["vcard"]."street",
                $post["vcard:street0"],$vals[$GLOBALS["ns_var"]["vcard"]."street"][0]["content"]);
            //locality - city
            literalEdit($store,$model,$adruri,$GLOBALS["ns_var"]["vcard"]."locality",
                $post["vcard:locality0"],$vals[$GLOBALS["ns_var"]["vcard"]."locality"][0]["content"]);
            //postal code
            literalEdit($store,$model,$adruri,$GLOBALS["ns_var"]["vcard"]."postal-code",
                $post["vcard:postal-code0"],$vals[$GLOBALS["ns_var"]["vcard"]."postal-code"][0]["content"]);
            //country name
            literalEdit($store,$model,$adruri,$GLOBALS["ns_var"]["vcard"]."country-name",
                $post["vcard:country-name0"],$vals[$GLOBALS["ns_var"]["vcard"]."country-name"][0]["content"]);
        }
        
        //PRICE
        if (isset($post["priceradio"]))
            $priceopt = $post["priceradio"]; //1=exact //2=range
        else $priceopt = 0;
        $priceQuery = 'SELECT ?ep ?epl ?epu WHERE {
            OPTIONAL {
            <'.$conuri.'> <'.$GLOBALS["ns_var"]["pc"].'estimatedPriceLower> ?epl .
            <'.$conuri.'> <'.$GLOBALS["ns_var"]["pc"].'estimatedPriceUpper> ?epu . }
            OPTIONAL {
            <'.$conuri.'> <'.$GLOBALS["ns_var"]["pc"].'estimatedPrice> ?ep . }
            }';
        $pricesuri = $model->sparqlQuery($priceQuery);
        $epuri = $pricesuri[0]["ep"];
        $epLuri = $pricesuri[0]["epl"];
        $epUuri = $pricesuri[0]["epu"];
        $epres = new OntoWiki_Model_Resource($store,$model,$epuri);
        $epvals = $epres->getValues();
        $epLres = new OntoWiki_Model_Resource($store,$model,$epLuri);
        $epLvals = $epLres->getValues();
        $epUres = new OntoWiki_Model_Resource($store,$model,$epUuri);
        $epUvals = $epUres->getValues();
        //exact
        $priceExVal = $post["gr:hasCurrencyValue0"];
        if (empty($priceExVal)) $priceExVal = 0;
        $priceExCur = $post["gr:hasCurrency0"];
        if ($priceopt == 1) {
            if (!empty($epLuri) && !empty($epUuri)) {
                deleteResource($store,$model->getModelIri(),$epLuri);
                deleteResource($store,$model->getModelIri(),$epUuri);
                $store->deleteMatchingStatements($model->getModelUri(),
                    $conuri,
                    $GLOBALS["ns_var"]["pc"]."estimatedPriceLower",
                    array('value' => $epLuri, 'type'  => 'uri'));
                $store->deleteMatchingStatements($model->getModelUri(),
                    $conuri,
                    $GLOBALS["ns_var"]["pc"]."estimatedPriceUpper",
                    array('value' => $epUuri, 'type'  => 'uri'));
            }
            //TODO: neprepisovat pokazde - kontrolovat zmenu
            if ($epvals != array())
                deleteResource($store,$model->getModelIri(),$epuri);
            $newresEx = $conuri."/price-specification/1";
            $stmtArray = array(
                $newresEx => array(
                    EF_RDF_TYPE => array(array(
                        'type'  => 'uri',
                        'value' => $GLOBALS["ns_var"]["gr"]."PriceSpecification" 
                    )),
                    $GLOBALS["ns_var"]["gr"]."hasCurrency" => array(array(
                        'type'  => 'literal',
                        'value' => $priceExCur
                    )),
                    $GLOBALS["ns_var"]["gr"]."hasCurrencyValue" => array(array(
                        'type'  => 'literal',
                        'value' => $priceExVal
                    ))
                ),
                $conuri => array(
                    $GLOBALS["ns_var"]["pc"]."estimatedPrice" => array(array(
                        'type'  => 'uri',
                        'value' => $newresEx
                    ))
                )
            );
            //print_r($stmtArray);
            $store->addMultipleStatements($model->getModelIri(), $stmtArray, true);
        }
        //bounds
        $priceLoVal = $post["gr:hasCurrencyValue1"]; //lower
        if (empty($priceLoVal)) $priceLoVal = 0;
        $priceLoCur = $post["gr:hasCurrency1"];
        $priceUpVal = $post["gr:hasCurrencyValue2"]; //upper
        if (empty($priceUpVal)) $priceUpVal = 0;
        $priceUpCur = $post["gr:hasCurrency2"];
        if ($priceopt == 2) {
            if (!empty($epuri) && $epvals != array()) {
                deleteResource($store,$model->getModelIri(),$epuri);
                $store->deleteMatchingStatements($model->getModelUri(),
                    $conuri,
                    $GLOBALS["ns_var"]["pc"]."estimatedPrice",
                    array('value' => $epuri, 'type'  => 'uri'));
            }
            //TODO: neprepisovat pokazde - kontrolovat zmenu
            if ($epLvals != array())
                deleteResource($store,$model->getModelIri(),$epLuri);
            if ($epUvals != array())
                deleteResource($store,$model->getModelIri(),$epUuri);
            $newresLo = $conuri."/price-specification/2";
            $newresUp = $conuri."/price-specification/3";
            $stmtArray = array(
                $newresLo => array(
                    EF_RDF_TYPE => array(array(
                        'type'  => 'uri',
                        'value' => $GLOBALS["ns_var"]["gr"]."PriceSpecification" 
                    )),
                    $GLOBALS["ns_var"]["gr"]."hasCurrency" => array(array(
                        'type'  => 'literal',
                        'value' => $priceLoCur
                    )),
                    $GLOBALS["ns_var"]["gr"]."hasCurrencyValue" => array(array(
                        'type'  => 'literal',
                        'value' => $priceLoVal
                    ))
                ),
                $newresUp => array(
                    EF_RDF_TYPE => array(array(
                        'type'  => 'uri',
                        'value' => $GLOBALS["ns_var"]["gr"]."PriceSpecification" 
                    )),
                    $GLOBALS["ns_var"]["gr"]."hasCurrency" => array(array(
                        'type'  => 'literal',
                        'value' => $priceUpCur
                    )),
                    $GLOBALS["ns_var"]["gr"]."hasCurrencyValue" => array(array(
                        'type'  => 'literal',
                        'value' => $priceUpVal
                    ))
                ),
                $conuri => array(
                    $GLOBALS["ns_var"]["pc"]."estimatedPriceLower" => array(array(
                        'type'  => 'uri',
                        'value' => $newresLo
                    )),
                    $GLOBALS["ns_var"]["pc"]."estimatedPriceUpper" => array(array(
                        'type'  => 'uri',
                        'value' => $newresUp
                    ))
                )
            );
            //print_r($stmtArray);
            $store->addMultipleStatements($model->getModelIri(), $stmtArray, true);
        }
        
        /*$priceLoVal = $post["gr:hasCurrencyValue1"]; //lower
        $priceLoCur = $post["gr:hasCurrency1"];
        $priceUpVal = $post["gr:hasCurrencyValue2"]; //upper
        $priceUpCur = $post["gr:hasCurrency2"];*/
        
        //TENDERS
        if (isset($post["tenderCounter"])) {
            $num_tenders = $post["tenderCounter"];
            $queryten = 'SELECT ?t WHERE {
                <'.$conuri.'> <'.$GLOBALS["ns_var"]["pc"].'tender> ?t . }';
            $tendersuri = $model->sparqlQuery($queryten);
            $turis = array();
            foreach ($tendersuri as $turi)
                $turis[] = $turi["t"];
            for ($i=1; $i<=$num_tenders; $i++) {
                $tprefix = $conuri."/tender/";
                $turi = $tprefix.$i;
                //delete tender
                if (!isset($post["pc:tender_pc:supplier".$i]) && in_array($turi,$turis)) {
                    deleteResource($store,$model->getModelIri(),$turi);
                    $store->deleteMatchingStatements($model->getModelUri(),
                        $conuri,
                        $GLOBALS["ns_var"]["pc"]."tender",
                        array('value' => $turi, 'type'  => 'uri'));
                }
                //create + update
                else if (isset($post["pc:tender_pc:supplier".$i])) {
                    $tprice = $post["pc:tender_gr:hasCurrencyValue".$i];
                    $tcurrency = $post["pc:tender_gr:hasCurrency".$i];
                    $tsupplier = $post["pc:tender_pc:supplier".$i];
                    //update tender
                    if (in_array($turi,$turis)) {
                        $tenderQuery = 'SELECT ?s ?p ?cv ?c WHERE {
                            <'.$turi.'> <'.$GLOBALS["ns_var"]["pc"].'supplier> ?s .
                            <'.$turi.'> <'.$GLOBALS["ns_var"]["pc"].'offeredPrice> ?p .
                            ?p <'.$GLOBALS["ns_var"]["gr"].'hasCurrencyValue> ?cv .
                            ?p <'.$GLOBALS["ns_var"]["gr"].'hasCurrency> ?c . }';
                        $tenderRes = $model->sparqlQuery($tenderQuery);
                        $tpriceuri = $tenderRes[0]["p"];
                        $toldprice = $tenderRes[0]["cv"];
                        $toldcurrency = $tenderRes[0]["c"];
                        $toldsupplier = $tenderRes[0]["s"];
                        uriEdit($store,$model,$turi,$GLOBALS["ns_var"]["pc"]."supplier",$tsupplier,$toldsupplier);
                        literalEdit($store,$model,$tpriceuri,$GLOBALS["ns_var"]["gr"]."hasCurrencyValue",$tprice,$toldprice);
                        literalEdit($store,$model,$tpriceuri,$GLOBALS["ns_var"]["gr"]."hasCurrency",$tcurrency,$toldcurrency);
                    }
                    //create tender
                    else {
                        $tpriceuri = $turi."/price-specification/1";
                        try {
                            $stmtArray = array(
                                $conuri => array(
                                    $GLOBALS["ns_var"]["pc"].'tender' => array(array(
                                        'type'  => 'uri',
                                        'value' => $turi
                                    ))
                                ),
                                $turi => array(
                                    EF_RDF_TYPE => array(array(
                                        'type'  => 'uri',
                                        'value' => $GLOBALS["ns_var"]["pc"].'Tender' 
                                    )),
                                    $GLOBALS["ns_var"]["pc"].'offeredPrice' => array(array(
                                        'type'  => 'uri',
                                        'value' => $tpriceuri 
                                    )),
                                    $GLOBALS["ns_var"]["pc"].'supplier' => array(array(
                                        'type'  => 'uri',
                                        'value' => $tsupplier 
                                    ))
                                ),
                                $tpriceuri => array(
                                    EF_RDF_TYPE => array(array(
                                        'type'  => 'uri',
                                        'value' => $GLOBALS["ns_var"]["gr"].'PriceSpecification' 
                                    )),
                                    $GLOBALS["ns_var"]["gr"].'hasCurrencyValue' => array(array(
                                        'type'  => 'literal',
                                        'value' => $tprice
                                    )),
                                    $GLOBALS["ns_var"]["gr"].'hasCurrency' => array(array(
                                        'type'  => 'literal',
                                        'value' => $tcurrency
                                    ))
                            ));
                            //print_r($stmtArray);
                            $store->addMultipleStatements($model->getModelIri(), $stmtArray, true);
                            //invalidate cache (po publish nebylo vidět v properties contractu)
                            //$cache = $this->_owApp->erfurt->getQueryCache();
                            //$cache->invalidateWithModelIri($model->getModelIri());
                            //succesfully created
                        } catch (Exception $e) {
                            //error
                        }
                    }
                }
            }
        }

    
    }

