<?php
    $templateData = loadData();
    $ow = OntoWiki::getInstance();
    $user = $ow->getUser();
    $store = $ow->erfurt->getStore();

    $username = $user->getUsername();
    $psuri = getPrivateSpace($ow);
    if ($psuri === false) throw new OntoWiki_Exception("User has no private space.");
    $modeluri = $psuri[0];
    $model = $store->getModel($modeluri);
    $publicmodeluri = $templateData["publicspace"];
    $publicmodel = new Erfurt_Rdf_Model($publicmodeluri);
    //$ontomodeluri = "http://purl.org/procurement/public-contracts#";
    //$ontomodel = new Erfurt_Rdf_Model($ontomodeluri);
    if (!isset($_REQUEST["uri"])) throw new OntoWiki_Exception("No resource selected.");//TODO: check type
    $conuri = $_REQUEST["uri"];
    $resourceuri = $conuri;
    $resource = new Erfurt_Rdf_Model($resourceuri);
    $title = $resource->getTitle();
    $userprefix = $templateData["user"];

    $xsdp = $model->getNamespacePrefix($GLOBALS["ns_var"]["xsd"]);
    
    $conobj = new ContractsApp_Contract($store, $publicmodel, $model, $conuri);
    
    //CHECK IF PRIOR NOTICE PUBLISHED
    /*$res_priorpubished = $publicmodel->sparqlQuery('SELECT ?x
        WHERE {
            <'.$resourceuri.'> <'.$GLOBALS["ns_var"]["pc"].'notice> ?x .
            ?x a <'.$GLOBALS["ns_var"]["pc"].'PriorInformationNotice> .
            }');*/
    //if ($res_priorpubished == array()) {
    if (!$conobj->getState()->canCancel()) {
        //resource does not exist
        //printMessage("Prior information notice wasn't published. Contract can't be canceled.",OntoWiki_Message::ERROR);
        printMessage("Invalid state.",OntoWiki_Message::ERROR);
        //can not publish notice
    }
    else {
        //CHECK EXISTENCE IN PUBLIC STORE
        /*$res_inpublic = $publicmodel->sparqlQuery('SELECT ?x
            WHERE {
                <'.$resourceuri.'> <'.$GLOBALS["ns_var"]["pc"].'notice> ?x .
                ?x a <'.$GLOBALS["ns_var"]["pc"].'CancellationNotice> .
                }');*/
        //if ($res_inpublic !== array()) {
        if (!$conobj->getState()->canCancel()) {
            //resource already exists
            //printMessage("Contract already cancelled.",OntoWiki_Message::ERROR);
            printMessage("Invalid state.",OntoWiki_Message::ERROR);
            //can not republish
        }
        else {
            //CREATION OF CANCELLATION NOTICE
            $pinuri = $resourceuri."/cancellation-notice/1";
            $publisheruri = $userprefix.$username;
            //select creator
            $query_creator = 'SELECT ?creator WHERE {
                <'.$resourceuri.'> <'.$GLOBALS["ns_var"]["dcterms"].'creator> ?creator. }';
            $res = $model->sparqlQuery($query_creator);
            if ($res == array())
                $creatoruri = $publisheruri;
            else
                $creatoruri = $res[0]["creator"];
            $publicationdate = Date("Y-m-d");
            $fillingAppUri = $templateData["fillingapp"];
            $stmtArray = array(
                $resourceuri => array( //add notice link
                    $GLOBALS["ns_var"]["pc"]."notice" => array(array(
                        'type'  => 'uri',
                        'value' => $pinuri
                    ))
                ),
                $pinuri => array( //create notice
                    EF_RDF_TYPE => array(array(
                        'type'  => 'uri',
                        'value' => 'http://purl.org/procurement/public-contracts#CancellationNotice' 
                    ),
                    array(
                        'type'  => 'uri',
                        'value' => 'http://www.w3.org/ns/prov#Entity'
                    )),
                    'http://www.w3.org/ns/prov#wasAttributedTo' => array(array(
                        'type'  => 'uri',
                        'value' => $fillingAppUri
                    )),
                    'http://purl.org/dc/terms/creator' => array(array( //id toho kdo vytvoril kontrakt
                        'type'  => 'uri',
                        'value' => $creatoruri
                    )),
                    'http://purl.org/dc/terms/publisher' => array(array( //id toho kdo publikuje
                        'type'  => 'uri',
                        'value' => $publisheruri
                    )),
                    'http://purl.org/procurement/public-contracts#publicationDate' => array(array(
                        'type'  => 'literal', 'datatype' => $xsdp.':date',
                        'value' => $publicationdate
                    ))
            ));
            //print_r($stmtArray);
            //echo $publicmodel->getModelIri();
            //PUBLISH
            $store->addMultipleStatements($publicmodel->getModelIri(), $stmtArray, false);
            printMessage("Contract cancelled successfully.",OntoWiki_Message::SUCCESS);
        }
    }